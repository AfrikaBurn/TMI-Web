<?php

/**
 * @file
 * Node access password install file.
 */

/**
 * Implements hook_schema().
 */
function nodeaccess_password_schema() {
  $schema['nodeaccess_password'] = array(
    'fields' => array(
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'realm' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'password'  => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        ),
    ),
    'primary key' => array('nid', 'realm'),
  );
  $schema['nodeaccess_password_users'] = array(
    'fields' => array(
      'uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'password'  => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        ),
    ),
    'primary key' => array('uid', 'password'),
  );
  $schema['nodeaccess_password_realm'] = array(
    'fields' => array(
      'id' => array(
        'description' => 'The primary identifier for a realm.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name'  => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'settings' => array(
        'description' => t('Settings for this realm.'),
        'type' => 'text',
        'size' => 'big',
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('id'),
  );
  return $schema;
}

/**
 * Implements hook_uninstall().
 */
function nodeaccess_password_uninstall() {
  // Remove variables.
  variable_del('nodeaccess_password_old_403');
  variable_del('nodeaccess_password_profile_category');
}

/**
 * Implements hook_disable().
 */
function nodeaccess_password_disable() {
  module_load_include('inc', 'nodeaccess_password', 'nodeaccess_password.403');
  nodeaccess_password_403_restore();
}

/**
 * Implements hook_enable().
 */
function nodeaccess_password_enable() {
  module_load_include('inc', 'nodeaccess_password', 'nodeaccess_password.403');
  if (nodeaccess_password_403_check()) {
    nodeaccess_password_403_usurp();
  }
}

/**
 * Implementation of hook_update_N().
 *
 * Update how user passwords are stored.
 *
 * @see hook_update_N()
 */
function nodeaccess_password_update_6300() {
  $schema = nodeaccess_password_schema();
  db_create_table('nodeaccess_password_users', $schema['nodeaccess_password_users']);

  $result = db_query("SELECT uid, data FROM {users}");
  foreach ($result as $row) {
    $row = drupal_unpack($row);
    if (!empty($row->nodeaccess_password)) {
      $passwords = explode("\n", $row->nodeaccess_password);
      nodeaccess_password_user_set_passwords($row->uid, $passwords);
    }
  }
  node_access_needs_rebuild(TRUE);

  return t('Updating user password storage.');
}

/**
 * Update realms settings and storage.
 */
function nodeaccess_password_update_7400() {
  $schema = nodeaccess_password_schema();
  db_create_table('nodeaccess_password_realm', $schema['nodeaccess_password_realm']);
  for ($i = 1; variable_get('nodeaccess_password_realm_' . $i . '_name', FALSE) !== FALSE; $i++) {
    if (variable_get('nodeaccess_password_realm_' . $i . '_name', FALSE)) {
      $realm = new StdClass;
      $realm->name = variable_get('nodeaccess_password_realm_' . $i . '_name', '');
      $realm->nodes['types'] = variable_get('nodeaccess_password_realm_' . $i . '_types', '');
      $realm->roles = variable_get('nodeaccess_password_realm_' . $i . '_roles', '');
      $realm->access_denied = variable_get('nodeaccess_password_realm_' . $i . '_403', 1);
      $realm->grants['view'] = variable_get('nodeaccess_password_realm_' . $i . '_view', 1) ? 'view' : 0;
      $realm->grants['update'] = variable_get('nodeaccess_password_realm_' . $i . '_update', 0) ? 'update' : 0;
      $realm->grants['delete'] = variable_get('nodeaccess_password_realm_' . $i . '_delete', 0) ? 'delete' : 0;
      $realm->priority = variable_get('nodeaccess_password_priority', 0);
      $realm->author['view'] = variable_get('nodeaccess_password_author_view', 1) ? 'view' : 0;
      $realm->author['update'] = variable_get('nodeaccess_password_author_update', 0) ? 'update' : 0;
      $realm->author['delete'] = variable_get('nodeaccess_password_author_delete', 0) ? 'delete' : 0;
      $realm->all['view'] = 0;
      $realm->nodes['views']['view'] = '';
      $realm->nodes['views']['view_args'] = '';
      nodeaccess_password_realm_save($realm);
    }
    variable_del('nodeaccess_password_realm_' . $i . '_name');
    variable_del('nodeaccess_password_realm_' . $i . '_types');
    variable_del('nodeaccess_password_realm_' . $i . '_roles');
    variable_del('nodeaccess_password_realm_' . $i . '_403');
    variable_del('nodeaccess_password_realm_' . $i . '_view');
    variable_del('nodeaccess_password_realm_' . $i . '_update');
    variable_del('nodeaccess_password_realm_' . $i . '_delete');
  }
  variable_del('nodeaccess_password_priority');
  variable_del('nodeaccess_password_author_view');
  variable_del('nodeaccess_password_author_update');
  variable_del('nodeaccess_password_author_delete');

  // Update the nodeaccess_password table to use realm id instead of realm name.
  $realms = nodeaccess_password_get_realms();
  foreach ($realms as $realm) {
    db_query("UPDATE {nodeaccess_password} SET realm = :id WHERE realm = :name", array(':id' => $realm->id, ':name' => $realm->name));
  }
  db_change_field('nodeaccess_password', 'realm', 'realm', $schema['nodeaccess_password']['fields']['realm']);

  node_access_needs_rebuild(TRUE);
  return t('Updating realms settings and storage.');
}