<?php
/**
 * @file aaaa functions.
 */

/**
 * Implementation of _scopes().
 */
function button_scopes() {
  return array(
    'all_buttons_with_this_label' => array(
      'title' => t('All buttons with this label'),
      'description' => t('All buttons with this label.'),
      'css_class' => 'all_buttons_with_this_label',
      ),
  );
}

/**
 * Implementation of our "psuedo hook" _scope_identifier().
 *
 * $object is the object we want to examine, to find out what value would make a match for each scope.
 *
 * $scope is the scope we would like the comparitor value for.
 *
 * We return a "comparitor value" which is a unique part of the object which relates to each scope respectively.
 * eg if the supplied $object is a user.module block, and the scope is "this module", we will return "user".
 * If the supplied $object was also generated by the user module.
 *
 */
function button_scope_identifier($scope, $object, $request_uri) {
switch ($scope) {    
    case 'all_buttons_with_this_label':
      return $object['#value'];
      break;
          
    default:
      break;
  }
    
  return NULL;
}

/**
 * Override of theme_menu_local_tasks().
 */
function livethemer_menu_local_tasks($variables) {
  $output = '';
  $menu = theme_menu_local_tasks($variables);

  if (!empty($menu) && isset($variables['element'])) {
    $attributes = $variables['element']['#attributes'] ? $variables['element']['#attributes'] : array();
    $output  = '<div' . drupal_attributes($attributes) . '>';
    $output .= $menu;
    $output .= '</div>';
  }
  
  return $output;
}

// IS this needed? It looks like a straight copy of core theme_button!!?!? -Josh
/**
 * Override of theme_button().
 */
/* jh, 3 nov 11; can't see a reason â€” commenting out.
function livethemer_button($variables) {
  $element = $variables['element'];
  $element['#attributes']['type'] = 'submit';
  element_set_attributes($element, array('id', 'name', 'value'));

  $element['#attributes']['class'][] = 'form-' . $element['#button_type'];
  if (!empty($element['#attributes']['disabled'])) {
    $element['#attributes']['class'][] = 'form-button-disabled';
  }

  return '<input' . drupal_attributes($element['#attributes']) . ' />';
}
*/

/**
 * Override of theme_pager().
 */
function livethemer_pager($variables) {
  $pager = theme_pager($variables);

  $attributes = isset($variables['attributes']) ? drupal_attributes($variables['attributes']) : '';
  
  return '<div ' . $attributes . '>' . $pager . '</div>';

}

/**
 * Implementation of _scopes().
 */
function pager_scopes() {
  return array(
/*
    'this-pager' => array(
      'title' => t('This pager'),
      'description' => t('This pager.'),
      'css_class' => 'this-pager',
      ),
*/
  );
}

/**
 * Implementation of our "psuedo hook" _scope_identifier().
 *
 * $object is the object we want to examine, to find out what value would make a match for each scope.
 *
 * $scope is the scope we would like the comparitor value for.
 *
 * We return a "comparitor value" which is a unique part of the object which relates to each scope respectively.
 * eg if the supplied $object is a user.module block, and the scope is "this module", we will return "user".
 * If the supplied $object was also generated by the user module.
 *
 */
function pager_scope_identifier($scope, $object, $request_uri) {
  switch ($scope) {    
/*
    case 'this-pager':
      return $object['#value'];
      break;
*/
          
    default:
      break;
  }
    
  return NULL;
}


/**
 * Implementation of _scopes().
 */
function block_scopes() {
  return array(
    'this_object' => array(
      'title' => t('This block only'),
      'description' => t('Only this block, wherever it appears in your site .'),
      'css_class' => 'this-object',
      ),
    'all_blocks_in_this_region' => array(
      'title' => t('Blocks in this region'),
      'description' => t('All blocks in this theme region.'),
      'css_class' => 'all-blocks-in-this-region',
      ), 
    'this_module' => array(
      'title' => t('Blocks from this module'),
      'description' => t('Blocks created by the same module as the selected block.'),
      'css_class' => 'this-module',
    ),
  );
}

/**
 * Implementation of our "psuedo hook" hook_scope_identifier().
 */
function block_scope_identifier($scope, $object, $request_uri) {
switch ($scope) {
    case 'this_object':
      return $object['#block']->module . '-' . $object['#block']->delta;
      break;
    
    case 'all_blocks_in_this_region':
      return $object['#block']->region;
      break;
    
    case 'this_module':
      return $object['#block']->module;
      break;
          
    default: 
      return NULL;   
      break;
  }  
}

/**
 * Implementation of variation_id_scopes().
 */
function region_scopes() {
  return array(
    'this_object' => array(
      'title' => t('This region only'),
      'description' => t('This region only.'),
      'css_class' => 'this-object',
    ),
  );
}

/**
 * Implementation of our "psuedo hook" hook_scope_identifier().
 */
function region_scope_identifier($scope, $object, $request_uri) {
  switch ($scope) {
    case 'this_object':
      return $object['#region'];
      break;
    
    default: 
      return NULL;   
      break;
  }  
}

/**
 * Implementation of _scopes().
 */
function comment_scopes() {
  return array(
    'this_object' => array(
      'title' => t('This comment only'),
      'description' => t('Only this comment, wherever it appears in your site .'),
      'css_class' => 'this-object',
      ),
    'comment_user' => array(
      'title' => t('Comments by this user'),
      'description' => t('Comments by a particular user.'),
      'css_class' => 'comment-user',
    ),
    'comment_node_type' => array(
      'title' => t('Comments on this content type'),
      'description' => t('Comments appearing on this this node type.'),
      'css_class' => 'comment-node-type',
    ),
  );
}

/**
 * Implementation of our "psuedo hook" hook_scope_identifier().
 */
function comment_scope_identifier($scope, $object, $request_uri) {  
  switch ($scope) {
    case 'this_object':
      return $object['#comment']->cid;
      break;
    
    case 'comment_user':
      return $object['#comment']->uid;
      break;

    case 'comment_node_type':
      return $object['#comment']->node_type;
      break;
          
    default: 
      return NULL;   
      break;
  }  
}

/**
 * Implementation of _scopes().
 */
function node_scopes() {
  return array(
    'this_object' => array(
      'title' => t('This node only'),
      'description' => t('Only this node, wherever it appears in your site.'),
      'css_class' => 'this-object',
      ),
    'node_author' => array(
      'title' => t('Nodes by this author'),
      'description' => t('All nodes authored by this user.'),
      'css_class' => 'node-author',
    ),
    'node_type' => array(
      'title' => t('Nodes of this type'),
      'description' => t('All nodes of this content type'),
      'css_class' => 'node-type',
    ),
  );
}

/**
 * Implementation of our "psuedo hook" hook_scope_identifier().
 */
function node_scope_identifier($scope, $object, $request_uri) {  
  switch ($scope) {
    case 'this_object':
      return $object['#node']->nid;
      break;
    
    case 'node_author':
      return $object['#node']->uid;
      break;
    
    case 'node_type':
      return $object['#node']->type;
      break;
          
    default: 
      return NULL;   
      break;
  }  
}

/**
 * Implementation of variation_id_scopes().
 */
function table_scopes() {
  return array(
    'all_tables_with_this_label' => array(
      'title' => t('All tables with this label'),
      'description' => t('All tables with this label.'),
      'css_class' => 'all_tables_with_this_label',
    ),
  );
}

/**
 * Implementation of our "psuedo hook" hook_lt_object_scope_identifier().
 */
function table_scope_identifier($scope, $object, $request_uri) {
  switch ($scope) {    
    case 'all_tables_with_this_label':
      return $object['#value'];
      break;
          
    default:
      break;
  }
    
  return NULL;
}